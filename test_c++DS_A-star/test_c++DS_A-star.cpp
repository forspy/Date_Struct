#include"Astar.h"
#include<iostream>
#include<vector>
#include<list>
using namespace std;
/*
A* [1]  （A-Star)算法是一种静态路网中求解最短路径最有效的直接搜索方法，也是许多其他问题的常用启发式算法。
注意――是最有效的直接搜索算法，之后涌现了很多预处理算法（如ALT，CH，HL等等），在线查询效率是A*算法的数千甚至上万倍。
公式表示为： f(n)=g(n)+h(n),
其中， f(n) 是从初始状态经由状态n到目标状态的代价估计，
g(n) 是在状态空间中从初始状态到状态n的实际代价，
h(n) 是从状态n到目标状态的最佳路径的估计代价。
（对于路径搜索问题，状态就是图中的节点，代价就是距离）
h(n)的选取
保证找到最短路径（最优解的）条件，关键在于估价函数f(n)的选取（或者说h(n)的选取）。
我们以d(n)表达状态n到目标状态的距离，那么h(n)的选取大致有如下三种情况：
如果h(n)< d(n)到目标状态的实际距离，这种情况下，搜索的点数多，搜索范围大，效率低。但能得到最优解。
如果h(n)=d(n)，即距离估计h(n)等于最短距离，那么搜索将严格沿着最短路径进行， 此时的搜索效率是最高的。
如果 h(n)>d(n)，搜索的点数少，搜索范围小，效率高，但不能保证得到最优解。 [2]

*/
int main()
{
	vector<vector<int>> maze = {
		{ 1,1,1,1,1,1,1,1,1,1,1,1 },
		{ 1,0,0,0,0,0,0,0,0,1,1,1 },
		{ 1,1,0,1,0,1,1,1,1,1,1,1 },
		{ 1,1,0,1,0,1,1,0,0,0,1,1 },
		{ 1,1,0,1,0,1,1,0,1,0,1,1 },
		{ 1,1,0,1,0,0,0,0,1,0,1,1 },
		{ 1,1,0,1,1,1,1,1,1,0,1,1 },
		{ 1,1,0,1,1,1,1,1,1,0,1,1 },
		{ 1,1,0,0,0,1,1,1,1,0,1,1 },
		{ 1,1,1,1,0,1,1,1,1,0,1,1 },
		{ 1,1,1,1,0,0,1,1,1,0,0,1 },
		{ 1,1,1,1,1,1,1,1,1,1,1,1 },
	};
	Astar star(maze);
	Point startPoint(1, 1);
	Point endPoint(10, 10);
	//是否考虑斜对角走，这里考虑斜着走的距离和直走是一样的
	//采用欧几里得算法
	bool isIgnoreCorner = true;
	list<Point*> Path;
	Path=star.GetPath(startPoint, endPoint, isIgnoreCorner);
	for (list<Point*>::iterator it = Path.begin(); it != Path.end(); it++)
	{
		cout << "x=" << (*it)->x << ",y=" << (*it)->y << " G=" << (*it)->G << " H=" << (*it)->H << " F=" << (*it)->F << endl;
	}
	//这样便能完成斜线
	/*
		vector<vector<int>> maze = {
		   0 1 2 3 4 5 6 7 8 9 1011
		0{ 1,1,1,1,1,1,1,1,1,1,1,1 },
		1{ 1,0,0,0,0,0,0,0,0,1,1,1 },
		2{ 1,1,0,1,0,1,1,1,1,1,1,1 },
		3{ 1,1,0,1,0,1,1,0,0,0,1,1 },
		4{ 1,1,0,1,0,1,1,0,1,0,1,1 },
		5{ 1,1,0,1,0,0,0,0,1,0,1,1 },
		6{ 1,1,0,1,1,1,1,1,1,0,1,1 },
		7{ 1,1,0,1,1,1,1,1,1,0,1,1 },
		8{ 1,1,0,0,0,1,1,1,1,0,1,1 },
		9{ 1,1,1,1,0,1,1,1,1,0,1,1 },
	   10{ 1,1,1,1,0,0,1,1,1,0,0,1 },
	   11{ 1,1,1,1,1,1,1,1,1,1,1,1 },
	};
	*/
	//参考文献：https://blog.csdn.net/b2b160/article/details/4057781
	/*
	https://blog.csdn.net/xgf415/article/details/75200047
	https://blog.csdn.net/booirror/article/details/50834915
	https://blog.csdn.net/qq_34446253/article/details/51427423
	*/
}