/*
由来：平衡二叉树是基于二分法的策略提高数据的查找速度的二叉树的数据结构；

特点：
平衡二叉树是采用二分法思维把数据按规则组装成一个树形结构的数据，用这个树形结构的数据减少无关数据的检索，
大大的提升了数据检索的速度；平衡二叉树的数据结构组装过程有以下规则：

非叶子节点只能允许最多两个子节点存在，每一个非叶子节点数据分布规则为左边的子节点小当前节点的值，
右边的子节点大于当前节点的值(这里值是基于自己的算法规则而定的，比如hash值)
*/
//B树或B-tree
/*
概念：B树和平衡二叉树稍有不同的是B树属于多叉树又名平衡多路查找树（查找路径不只两个），
数据库索引技术里大量使用者B树和B+树的数据结构，让我们来看看他有什么特点;
2、规则：

（1）树中的每个节点最多拥有m个子节点且m>=2,空树除外（注：m阶代表一个树节点最多有多少个查找路径，m阶=m路,当m=2则是2叉树,m=3则是3叉）；

（2）除根节点外每个节点的关键字数量大于等于ceil(m/2)-1个小于等于m-1个，非根节点关键字数必须>=2;（注：ceil()是个朝正无穷方向取整的函数 如ceil(1.1)结果为2)

（3）所有叶子节点均在同一层、叶子节点除了包含了关键字和关键字记录的指针外也有指向其子节点的指针只不过其指针地址都为null对应下图最后一层节点的空格子

（4）如果一个非叶节点有N个子节点，则该节点的关键字数等于N-1;

（5）所有节点关键字是按递增次序排列，并遵循左小右大原则；
二分法的思想

*/
//定义一个5阶树（平衡5路查找树;），现在我们要把3、8、31、11、23、29、50、28 这些数字构建出一个5阶树出来;
/*
a.3
b.3 8
c.3 8 31
d.3 8 31 11
e.   11
3 8    23 31(5路最多4个元素，并且子节点>=2)
f.   11
3 8    23 29 31
g.   11
3 8    23 29 31 50
h.  11      29
3 8   23 28   31 50（当28加入时子节点元素超过5个需要拆分）
删除就是退化过程 h->g（比如删除28）
比如删除3，那么11下跳，23就要上跳，29下跳（其实28上跳也行）
      23
 8 11    28 29 31 50
 也可以是？待解决
       28
8 11 23  29 31 50
*/
/*
B树与二叉树的区别为：
B树相对于平衡二叉树的不同是，每个节点包含的关键字增多了，特别是在B树应用到数据库中的时候，
数据库充分利用了磁盘块的原理（磁盘数据存储是采用块的形式存储的，每个块的大小为4K，每次IO进行数据读取时，
同一个磁盘块的数据可以一次性读取出来）把节点大小限制和充分使用在磁盘快大小范围；
把树的节点关键字增多后树的层级比原来的二叉树少了，减少数据查找的次数和复杂度;
*/
/*
B+树是B树的一个升级版，相对于B树来说B+树更充分的利用了节点的空间，让查询速度更加稳定，其速度完全接近于二分法查找。
为什么说B+树查找的效率要比B树更高、更稳定；我们先看看两者的区别
（1）B+跟B树不同B+树的非叶子节点不保存关键字记录的指针，这样使得B+树每个节点所能保存的关键字大大增加；

（2）B+树叶子节点保存了父节点的所有关键字和关键字记录的指针，每个叶子节点的关键字从小到大链接；

（3）B+树的根节点关键字数量和其子节点个数相等;

（4）B+的非叶子节点只进行数据索引，不会存实际的关键字记录的指针，所有数据地址必须要到叶子节点才能获取到，
所以每次数据查询的次数都一样；
特点：

在B树的基础上每个节点存储的关键字数更多，树的层级更少所以查询数据更快，所有指关键字指针都存在叶子节点，
所以每次查找的次数都相同所以查询速度更稳定;

*/